plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.170'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    maven {
        //Placebo, Attributes lib, Apotheosis + co
        name = "Shadows"
        url = "https://maven.shadowsoffire.dev/releases"
        content {
            includeGroup "dev.shadowsoffire"
            includeGroup "snownee.jade"
        }
    }
    maven {
        //EMI
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        //Actually Additions
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // Patchouli
        url = "https://maven.blamejared.com"
        content {
            includeGroup "vazkii.patchouli"
            includeGroupByRegex "net\\.darkhax.*"
            includeGroupByRegex "com\\.blamejared.*"
            includeGroup "mezz.jei"
        }
    }
    maven {
        // Curios
        url = "https://maven.octo-studios.com/releases"
        content {
            includeGroupByRegex "top\\.theillusivec4.*"
        }
    }
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

runs {
    configureEach {
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'info' //fatal, error, warn, info, debug, trace

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    if (Boolean.parseBoolean(load_jei)) {
        localRuntime "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"
    }

    //Apoth
    implementation "dev.shadowsoffire:Placebo:${minecraft_version}-${placebo_version}"
    implementation "dev.shadowsoffire:ApothicAttributes:${minecraft_version}-${apothic_attributes_version}"
    implementation "dev.shadowsoffire:ApothicSpawners:${minecraft_version}-${apothic_spawners_version}"
    implementation "dev.shadowsoffire:ApothicEnchanting:${minecraft_version}-${apothic_enchanting_version}"
    implementation "dev.shadowsoffire:Apotheosis:${minecraft_version}-${apotheosis_version}"

    //Curios
    implementation "top.theillusivec4.curios:curios-neoforge:${curios_version}"

    //Pufferfish's Skills
    implementation "curse.maven:puffish-skills-835091:${puffish_version}"
    implementation "curse.maven:puffish-attributes-991341:6047034"

    //EMI
    compileOnly "dev.emi:emi-neoforge:${emi_version}+${minecraft_version}"
    localRuntime "dev.emi:emi-neoforge:${emi_version}+${minecraft_version}"

    //Actually Additions
    compileOnly "curse.maven:actually-additions-228404:6003504"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url = "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
String moreLog = "\nFor the full changelog, go to https://github.com/TheWinABagel/Apoth-Compat/blob/main/CHANGELOG.md"

publishMods {
    file = jar.archiveFile
    String changes = new File("$project.rootDir/CHANGELOG.md").getText('UTF-8')
    changelog = "## " + mod_version + changes.takeBetween("## " + mod_version, "##") + moreLog
    //a little silly but works
    type = STABLE
    displayName = mod_name + " " + mod_version
    modLoaders.add("neoforge")

    curseforge {
        projectId = "1193691"
        projectSlug = "extra-apoth-compat" // Required for discord webhook
        accessToken = providers.environmentVariable("CF_TOKEN")
        minecraftVersions.add("1.21.1")
        javaVersions.add(JavaVersion.VERSION_21)
    }
}